Beautifier.java: "/Users/alhof/Repository/JsonWebDB/jsondb/src"
Beautifier.java: "lines: "+lines+" blanks: "+blanks+" code: "
Beautifier.java: "No open-source header "
Beautifier.java: "Blank lines in import section "
Beautifier.java: "Incomplete read "
TextFinder.java: "/Users/alhof/Repository/JsonWebDB/jsondb/src"
LicensHeader.java: "  MIT License\n\n"
LicensHeader.java: "  Copyright © 2023 Alex Høffner\n\n"
LicensHeader.java: "  Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n"
LicensHeader.java: "  and associated documentation files (the “Software”), to deal in the Software without\n"
LicensHeader.java: "  restriction, including without limitation the rights to use, copy, modify, merge, publish,\n"
LicensHeader.java: "  distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the\n"
LicensHeader.java: "  Software is furnished to do so, subject to the following conditions:\n\n"
LicensHeader.java: "  The above copyright notice and this permission notice shall be included in all copies or\n"
LicensHeader.java: "  substantial portions of the Software.\n\n"
LicensHeader.java: "  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n"
LicensHeader.java: "  BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
LicensHeader.java: "  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n"
LicensHeader.java: "  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n"
LicensHeader.java: "  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
LicensHeader.java: "/Users/alhof/Repository/JsonWebDB/jsondb/src"
LicensHeader.java: ".ts") || file.endsWith("java"
LicensHeader.java: "Could not read "
LicensHeader.java: "/*\n"+LicensHeader.header + "\n*/"
AdvancedPool.java: "replication-latency"
Generic.java: "Not implemented"
Generic.java: "Not implemented"
Messages.java: "No message files were found"
Messages.java: "No message files were found"
Messages.java: "No message found for "
Messages.java: "{%"+(i+1+"}"),args[i]+""
Formatter.java: "yyyy-MM-dd HH:mm:ss"
Formatter.java: " SEVERE  "+source+":"
Response.java: "EXCEPTION_WITHOUT_MESSAGE"
ObjectHandler.java: "UNKNOWN_REQUEST_TYPE"
Session.java: "method","connect()"
Session.java: "message",Messages.get("AUTHENTICATION_FAILED"
Session.java: "method","disconnect()"
Session.java: "message",Messages.get("NO_SUCH_SESSION"
Session.java: "message",Messages.get("DISCONNECT_FAILED"
Session.java: "method","keepalive()"
Session.java: "message",Messages.get("NO_SUCH_SESSION"
Session.java: "method","commit()"
Session.java: "message",Messages.get("NO_SUCH_SESSION"
Session.java: "message",Messages.get("SESSION_NOT_DEDICATED","commit"
Session.java: "method","rollback()"
Session.java: "message",Messages.get("NO_SUCH_SESSION"
Session.java: "message",Messages.get("SESSION_NOT_DEDICATED","rollback"
StateHandler.java: "accessed",info.age+" secs"
Config.java: "session-timeout"
Config.java: "connection-timeout"
Config.java: "transaction-timeout"
Config.java: "INSTANCE_NOT_REGISTERED"
FileResponse.java: "%-40s %s",path,"Page Not Found"
FileResponse.java: "%-40s %-15s %6dk"
Source.java: ""; else value += " "
Source.java: "Mandatory atrribute '"+attr+"' does not exist"
Sources.java: "Not implemented yet"
Sources.java: "usage: sources reload|list"
Sources.java: "Load source definitions"
Sources.java: "Source definitions loaded"
Sources.java: "Reload source definitions"
Sources.java: "Source definitions reloaded"
Session.java: "Move "+guid+" from "+info.inst+" to "
Session.java: ", age: "+age+"secs, conn: "
Monitor.java: " running every "+interval/1000+" secs"
JsonDB.java: "......................................................"
JsonDB.java: "Starting JsonDB version "
JsonDB.java: "......................................................"
JsonDB.java: "/jsondb\n\n"+request.toString(2)+"\n\n"+response.toString(2)+"\n"
GMTDate.java: "EEE, d MMM yyyy HH:mm:ss z"
Admin.java: "WWW-Authenticate","Basic realm='JsonWebDB'"
Admin.java: "Instance "+Config.inst()+" stopping..."
Admin.java: "totmem", ((int) (totmem /M))+"M"
Admin.java: "freemem",((int) (freemem/M))+"M"
Admin.java: "usedmem",((int) (usedmem/M))+"M"
Admin.java: "uptime",days+" days, "+hours+" hours"
Admin.java: "jsondb requests"
Admin.java: "Unable to stop process"
Handler.java: "If-modified-since"
Handler.java: "Content-Encoding","gzip"
Options.java: "/")) path += "/"
Server.java: "-c") || args[arg].equals("--config"
Server.java: "--config requires name as argument"
Server.java: "usage:    jsonwebdb [options] start|stop|status <instance>"
Server.java: "options:      -c | --config <configuration>"
Server.java: "Failed to stop server: "
Server.java: "Failed to get status for server: "
Server.java: "/" + cname.replace('.','/') + ".class"
Server.java: "jar") || url.getProtocol().equals("code-source"
Server.java: "!")); // get rid of "!class"
